{
  "hash": "c18320d34832a60fb5372c2ab0895aa4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"What is an API?\"\nexecute:\n    echo: true\nformat:\n    html:\n        code-fold: true\nlightbox: true\n---\n\n\n\n\nAn API (Application Programming Interface) is a set of rules and protocols enabling software programs to communicate and share information. While the term is often associated with \"web APIs,\" it encompasses a broader concept. For instance, an API might allow a library to share its collection data with a museum or enable a weather service to provide updates to a news organization. APIs operate based on predefined rules set by developers, specifying how data can be accessed and used. While some APIs are public, most are internal, facilitating communication between systems within an organization. \n\n## Using an API\n\nFor those unfamiliar with computer science, APIs can be a bit abstract, so let's try to explain it better with this example using the [The Cat API](https://thecatapi.com/). This API allows you to get information about different cat and dog breeds, with images and descriptions. The information is not available through a public interface, so if you want to see a cat image, you must use the API.\n\nIn this example, let's get the information about the Ragdoll cat breed. To do this, we require to use this API endpoint: [https://api.thecatapi.com/v1/images/XFhRpYS_D](https://api.thecatapi.com/v1/images/XFhRpYS_D). \n\nYou can click on that link to view the information about the cat in a format similar to this:\n\n::: {#75f4741c .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport os\nimport json\n\ndef get_cat_data(cat_id):\n    url = f\"https://api.thecatapi.com/v1/images/{cat_id}\"\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        raw_response = response.json()\n        return raw_response, json.dumps(raw_response, indent=4)\n    except json.JSONDecodeError as e:\n        print(f\"A JSONDecodeError occurred: {e}\\n\\n{raw_response}\")\n\ncat_data, pretty_cat_data = get_cat_data(\"XFhRpYS_D\")\nprint(pretty_cat_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"id\": \"XFhRpYS_D\",\n    \"url\": \"https://cdn2.thecatapi.com/images/XFhRpYS_D.jpg\",\n    \"breeds\": [\n        {\n            \"weight\": {\n                \"imperial\": \"12 - 20\",\n                \"metric\": \"5 - 9\"\n            },\n            \"id\": \"ragd\",\n            \"name\": \"Ragdoll\",\n            \"cfa_url\": \"http://cfa.org/Breeds/BreedsKthruR/Ragdoll.aspx\",\n            \"vetstreet_url\": \"http://www.vetstreet.com/cats/ragdoll\",\n            \"vcahospitals_url\": \"https://vcahospitals.com/know-your-pet/cat-breeds/ragdoll\",\n            \"temperament\": \"Affectionate, Friendly, Gentle, Quiet, Easygoing\",\n            \"origin\": \"United States\",\n            \"country_codes\": \"US\",\n            \"country_code\": \"US\",\n            \"description\": \"Ragdolls love their people, greeting them at the door, following them around the house, and leaping into a lap or snuggling in bed whenever given the chance. They are the epitome of a lap cat, enjoy being carried and collapsing into the arms of anyone who holds them.\",\n            \"life_span\": \"12 - 17\",\n            \"indoor\": 0,\n            \"lap\": 1,\n            \"alt_names\": \"Rag doll\",\n            \"adaptability\": 5,\n            \"affection_level\": 5,\n            \"child_friendly\": 4,\n            \"dog_friendly\": 5,\n            \"energy_level\": 3,\n            \"grooming\": 2,\n            \"health_issues\": 3,\n            \"intelligence\": 3,\n            \"shedding_level\": 3,\n            \"social_needs\": 5,\n            \"stranger_friendly\": 3,\n            \"vocalisation\": 1,\n            \"experimental\": 0,\n            \"hairless\": 0,\n            \"natural\": 0,\n            \"rare\": 0,\n            \"rex\": 0,\n            \"suppressed_tail\": 0,\n            \"short_legs\": 0,\n            \"wikipedia_url\": \"https://en.wikipedia.org/wiki/Ragdoll\",\n            \"hypoallergenic\": 0,\n            \"reference_image_id\": \"oGefY4YoG\"\n        }\n    ],\n    \"width\": 800,\n    \"height\": 1229\n}\n```\n:::\n:::\n\n\nThis format is called JSON, and its widely used in APIs to return data. We will see more about this format later, but for now, we can say that this output is called a **response**, and it contains **keys** and **values**. Keys are the names of the information we requested and values are the information we received. For instance, in this response, the url to the image of a Ragdoll cat can be found under the `url` key, and its value is `https://cdn2.thecatapi.com/images/XFhRpYS_D.jpg`.\n\n![JSON syntax](/static/imgs/JSON-syntax.png)\n\nNow, what we want to do is to get the image of the Ragdoll, not just the abstract information. To do this, we have to access the values associated with each key. The url to the image is under the `url` key, the name of the cat is under the `breeds` key and the description is under the `description` key. With a bit of coding, we can display the image of the cat:\n\n::: {#4d0e2508 .cell execution_count=2}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfrom matplotlib.image import imread\nimport PIL\nimport numpy as np\n\ndef display_cat_image(raw_response):\n    try:\n        image_url = raw_response[\"url\"]\n        cat_name = raw_response[\"breeds\"][0][\"name\"]\n        cat_description = raw_response[\"breeds\"][0][\"description\"]\n\n        image_parsed = np.array(PIL.Image.open(requests.get(image_url, stream=True).raw))\n\n        plt.figure(dpi=80)\n        plt.imshow(image_parsed)\n        plt.title(cat_name)\n        plt.figtext(0.5, 0.01, cat_description, wrap=True, horizontalalignment=\"center\")\n        plt.axis(\"off\")\n        plt.show()\n    except TypeError as e:\n        print(f\"A TypeError occurred: {e}\\n\\n{raw_response}\")\n\ndisplay_cat_image(cat_data)\n```\n\n::: {.cell-output .cell-output-display}\n![](what-is-an-api_files/figure-html/cell-3-output-1.png){width=554 height=384}\n:::\n:::\n\n\nCute, isn't it? \n\nWhat the API is doing, is to get the information from the server database, return it to the client in a format that can be easily parsed by a computer, and then the browser can use this information to display the cat image, or to get additional information about the cat. \n\n![A simple representation of an API (click to zoom)](/static/imgs/APIS.png)\n\nWith that information, we can display the information in a more readable format, and reutilize the method to get the image of other cats, for instance, a Bengal cat:\n\n::: {#d2394b14 .cell execution_count=3}\n``` {.python .cell-code}\ncat_data, pretty_cat_data = get_cat_data(\"LSaDk6OjY\")\ndisplay_cat_image(cat_data)\n```\n\n::: {.cell-output .cell-output-display}\n![](what-is-an-api_files/figure-html/cell-4-output-1.png){width=566 height=384}\n:::\n:::\n\n\nYou can even get a random cat image!\n\n::: {#cat-container .cell-html}\n<script>\nwindow.getRandomCat = async function () {\n    \n    const response = await fetch(\"https://api.thecatapi.com/v1/images/search?size=med&mime_types=jpg&format=json&has_breeds=true&order=RANDOM&page=0&limit=1\");\n    if (!response.ok) throw new Error(\"Failed to fetch random cat.\");\n    const data = await response.json();\n    \n\n    const cat = data[0];\n\n    const cat_id = cat.id;\n\n    const cat_detailed_info = await fetch(`https://api.thecatapi.com/v1/images/${cat_id}`);\n    const cat_detailed_info_json = await cat_detailed_info.json();\n\n    // Safely access items that might be undefined or empty\n    const breed = cat_detailed_info_json.breeds && cat_detailed_info_json.breeds.length > 0 ? cat_detailed_info_json.breeds[0].name : \"Unknown\";\n    const description = cat_detailed_info_json.breeds && cat_detailed_info_json.breeds.length > 0 ? cat_detailed_info_json.breeds[0].description : \"Unknown\";\n\n    document.getElementById(\"cat-image\").innerHTML = `\n        <div class=\"card\" style=\"max-width: 300px; margin: 15px auto;\">\n            <img src=\"${cat.url}\" class=\"card-img-top\" alt=\"Random Cat\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">Breed: ${breed}</h5>\n                <p class=\"card-text\">${description}</p>\n            </div>\n        </div>\n    `;\n};\n\n</script>\n<button onclick=\"getRandomCat()\" class=\"btn btn-primary\" style=\"padding: 10px 20px; font-size: 16px; display: block; margin: 0 auto;\">Click here to get a random cat :)</button>\n<div id=\"cat-image\" style=\"margin-top: 15px;\"></div>\n:::\n\n<hr>\n\nNow that we've seen how APIs work, let's dive into why they're so essential.\n\n## Why Do We Need APIs?\n\nA common question might be: why use an API instead of simply sharing the data directly?\n\n### Simplifying Access to Data\nFor researchers, APIs simplify access to complex datasets. Imagine working with a public archive or a library catalog where data is stored in various relational tables. Instead of manually extracting and organizing the data, an API allows you to query for specific subsets—like texts published in a particular year or metadata about historical photographs—without worrying about the database structure.\n\nAn API simplifies this process by predefining these complex queries and providing endpoints to access the data you need with minimal effort. Instead of interacting directly with the database, users make requests to the API and receive only the required data in a user-friendly format, like JSON.\n\n### Enhancing Security and Performance\nDirect access to a database can compromise its security and integrity. Opening a database to the public exposes it to risks, such as unauthorized modifications or data breaches. APIs mitigate these risks by controlling what data is accessible and to whom. For instance APIs can restrict access to specific users or IP addresses. APIs can also limit the amount of data retrieved, improving performance.\n\nFor collaborative research, APIs ensure secure and consistent access to data across teams and institutions. They also enhance reproducibility by allowing other researchers to replicate data retrieval processes through well-documented endpoints.\n\n### Why Not Share Data as a Downloadable File?\nSharing data in formats like Excel or CSV files can sometimes be a practical solution. However, this approach has significant limitations, for instance, downloadable files do not automatically update when the source data changes. Users must re-download the file every time updates are made, which can lead to outdated information. Another limitation is associated with the size of the file. For large datasets, downloading and processing the entire file can be inefficient and cumbersome.\n\nUltimately, whether to use an API or share data as a downloadable file depends on the project's specific needs, balancing dynamic access with ease of use. When you need to retrieve specific data subsets or interact with the data dynamically, an API is ideal. It provides granularity and ensures users access the most up-to-date information. When users need the entire dataset for analysis or offline use, offering a downloadable file might be more appropriate.\n\n::: {.callout-caution collapse=\"false\"}\n## APIs for bulk data retrieval\nAPIs are not designed for bulk data retrieval but for accessing data in a more focused and controlled way. It bridges the gap between complex databases and the users who need specific, timely information.\n:::\n\n## APIs in Research\n\nIn research, APIs bridge the gap between data and analysis by automating data collection and streamlining workflows. A historian studying digitized newspapers, for instance, can use APIs to query articles that mention specific events, dates, or people. Social scientists can analyze real-time conversations and trends through APIs from platforms like *X* or *YouTube*, while environmental researchers can leverage satellite data APIs to monitor deforestation patterns. By enabling seamless integration across datasets, APIs foster interdisciplinary collaboration and empower scholars to tackle complex questions with innovative approaches.\n\n::: {.callout-note collapse=\"false\"}\n## In summary\nAPIs are not just tools for developers—they hold immense potential for researchers, too. By providing structured, dynamic access to datasets, APIs enable scholars to automate data collection, access real-time information, and integrate diverse data sources into their workflows. Whether you’re studying digital humanities, analyzing climate data, or investigating social media trends, APIs allow you to retrieve exactly the data you need, at scale and with precision. Embracing APIs as part of your research toolkit opens doors to innovative methodologies and insights that might otherwise remain out of reach.\n:::\n\n",
    "supporting": [
      "what-is-an-api_files"
    ],
    "filters": [],
    "includes": {}
  }
}