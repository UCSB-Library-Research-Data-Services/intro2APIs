---
title: "What is an API?"
execute:
    echo: true
format:
    html:
        code-fold: true
lightbox: true
---

An API (Application Programming Interface) is a set of rules and protocols enabling software programs to communicate and share information. While the term is often associated with "web APIs," it encompasses a broader concept. For instance, an API might allow a library to share its collection data with a museum or enable a weather service to provide updates to a news organization. APIs operate based on predefined rules set by developers, specifying how data can be accessed and used. While some APIs are public, most are internal, facilitating communication between systems within an organization. 

For those unfamiliar with computer science, APIs can be a bit abstract, so let's try to explain it better with this example using the [The Cat API](https://thecatapi.com/). This API allows you to get information about different cat and dog breeds, with images and descriptions. The information is not available through a public interface, so if you want to see a cat image, you must use the API.

In this example, let's get the information about the Ragdoll cat breed. To do this, we require to use this API endpoint: [https://api.thecatapi.com/v1/images/XFhRpYS_D](https://api.thecatapi.com/v1/images/XFhRpYS_D). 

You can click on that link to view the information about the cat in a format similar to this:


```{python}
import requests
import os
import json

def get_cat_data(cat_id):
    url = f"https://api.thecatapi.com/v1/images/{cat_id}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        raw_response = response.json()
        return raw_response, json.dumps(raw_response, indent=4)
    except json.JSONDecodeError as e:
        print(f"A JSONDecodeError occurred: {e}\n\n{raw_response}")

cat_data, pretty_cat_data = get_cat_data("XFhRpYS_D")
print(pretty_cat_data)
```

This format is called JSON, and its widely used in APIs to return data. We will see more about this format later, but for now, we can say that this output is called a **response**, and it contains **keys** and **values**. Keys are the names of the information we requested and values are the information we received. For instance, in this response, the url to the image of a Ragdoll cat can be found under the `url` key, and its value is `https://cdn2.thecatapi.com/images/XFhRpYS_D.jpg`.

![JSON syntax](/static/imgs/JSON-syntax.png)

Now, what we want to do is to get the image of the Ragdoll, not just the abstract information. To do this, we have to access the values associated with each key. The url to the image is under the `url` key, the name of the cat is under the `breeds` key and the description is under the `description` key. With a bit of coding, we can display the image of the cat:

```{python}
from matplotlib import pyplot as plt
from matplotlib.image import imread
import PIL
import numpy as np

def display_cat_image(raw_response):
    try:
        image_url = raw_response["url"]
        cat_name = raw_response["breeds"][0]["name"]
        cat_description = raw_response["breeds"][0]["description"]

        image_parsed = np.array(PIL.Image.open(requests.get(image_url, stream=True).raw))

        plt.figure(dpi=80)
        plt.imshow(image_parsed)
        plt.title(cat_name)
        plt.figtext(0.5, 0.01, cat_description, wrap=True, horizontalalignment="center")
        plt.axis("off")
        plt.show()
    except TypeError as e:
        print(f"A TypeError occurred: {e}\n\n{raw_response}")

display_cat_image(cat_data)
```


Cute, isn't it? 

What the API is doing, is to get the information from the server database, return it to the client in a format that can be easily parsed by a computer, and then the browser can use this information to display the cat image, or to get additional information about the cat. 

![A simple representation of an API (click to zoom)](/static/imgs/APIS.png)

With that information, we can display the information in a more readable format, and reutilize the method to get the image of other cats, for instance, a Bengal cat:

```{python}
cat_data, pretty_cat_data = get_cat_data("LSaDk6OjY")
display_cat_image(cat_data)
```

You can even get a random cat image!

::: {#cat-container .cell-html}
<script>
window.getRandomCat = async function () {
    
    const response = await fetch("https://api.thecatapi.com/v1/images/search?size=med&mime_types=jpg&format=json&has_breeds=true&order=RANDOM&page=0&limit=1");
    if (!response.ok) throw new Error("Failed to fetch random cat.");
    const data = await response.json();
    

    const cat = data[0];

    const cat_id = cat.id;

    const cat_detailed_info = await fetch(`https://api.thecatapi.com/v1/images/${cat_id}`);
    const cat_detailed_info_json = await cat_detailed_info.json();

    // Safely access items that might be undefined or empty
    const breed = cat_detailed_info_json.breeds && cat_detailed_info_json.breeds.length > 0 ? cat_detailed_info_json.breeds[0].name : "Unknown";
    const description = cat_detailed_info_json.breeds && cat_detailed_info_json.breeds.length > 0 ? cat_detailed_info_json.breeds[0].description : "Unknown";

    document.getElementById("cat-image").innerHTML = `
        <div class="card" style="max-width: 300px; margin: 15px auto;">
            <img src="${cat.url}" class="card-img-top" alt="Random Cat">
            <div class="card-body">
                <h5 class="card-title">Breed: ${breed}</h5>
                <p class="card-text">${description}</p>
            </div>
        </div>
    `;
};

</script>
<button onclick="getRandomCat()" class="btn btn-primary" style="padding: 10px 20px; font-size: 16px; display: block; margin: 0 auto;">Click here to get a random cat :)</button>
<div id="cat-image" style="margin-top: 15px;"></div>
:::

<hr>

::: {.callout-note collapse="false"}
## In summary
APIs provide access to structured data from a database without requiring knowledge of its underlying structure, and allow us to reformat the information, must be as a user friendly representation, or even translate that information to a tabular format.
:::


